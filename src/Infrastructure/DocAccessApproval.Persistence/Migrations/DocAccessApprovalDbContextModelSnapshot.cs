// <auto-generated />
using System;
using DocAccessApproval.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DocAccessApproval.Persistence.Migrations
{
    [DbContext(typeof(DocAccessApprovalDbContext))]
    partial class DocAccessApprovalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("DocAccessApproval.Domain.AggregateModels.DocumentAggregate.AccessRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("AccessRequests", (string)null);
                });

            modelBuilder.Entity("DocAccessApproval.Domain.AggregateModels.DocumentAggregate.Decision", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccessRequestId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DecisionDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccessRequestId")
                        .IsUnique();

                    b.ToTable("Decisions", (string)null);
                });

            modelBuilder.Entity("DocAccessApproval.Domain.AggregateModels.DocumentAggregate.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("DocAccessApproval.Domain.AggregateModels.UserAggregate.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("DocAccessApproval.Domain.AggregateModels.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("DocAccessApproval.Domain.AggregateModels.UserAggregate.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("DocAccessApproval.Domain.AggregateModels.DocumentAggregate.AccessRequest", b =>
                {
                    b.HasOne("DocAccessApproval.Domain.AggregateModels.DocumentAggregate.Document", null)
                        .WithMany("AccessRequests")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocAccessApproval.Domain.AggregateModels.DocumentAggregate.Decision", b =>
                {
                    b.HasOne("DocAccessApproval.Domain.AggregateModels.DocumentAggregate.AccessRequest", null)
                        .WithOne("Decision")
                        .HasForeignKey("DocAccessApproval.Domain.AggregateModels.DocumentAggregate.Decision", "AccessRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocAccessApproval.Domain.AggregateModels.UserAggregate.UserRole", b =>
                {
                    b.HasOne("DocAccessApproval.Domain.AggregateModels.UserAggregate.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocAccessApproval.Domain.AggregateModels.UserAggregate.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DocAccessApproval.Domain.AggregateModels.DocumentAggregate.AccessRequest", b =>
                {
                    b.Navigation("Decision")
                        .IsRequired();
                });

            modelBuilder.Entity("DocAccessApproval.Domain.AggregateModels.DocumentAggregate.Document", b =>
                {
                    b.Navigation("AccessRequests");
                });

            modelBuilder.Entity("DocAccessApproval.Domain.AggregateModels.UserAggregate.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
